" 기능 설정
syntax on           " 언어에 따른 자동 문법, 구문의 색을 다르게 표시
filetype on         " 파일 종류를 자동으로 인식
let mapleader=" "

set nocompatible                " vi와 호환하지 않음
set ru                          " 화면 우측 한단에 현재 커서의 위치(줄,칸)
set sc                          " 완성중인 명령을 표시
set sm                          " 함수 닫기 표시
set vb                          " 키를 잘못눌렀을 때 삑 소리를 내는 대신 번쩍임
set hls                         " 검색된 스트링의 하이라이트
set nu                          " 라인수를 표시
set rnu                         " 상대적인 라인수를 표시
set scs                         " 똑똑한 대소문자 구별 기능
set hi=50                       " 명령어를 기록에 날길 개수 지정
set cul                         " 커서가 있는 라인 하이라이트
set ic                          " 검색시 대소문자 무시
set incsearch                   " 키워드 입력시 점진적 검색
set title                       " change the terminal title
set mousehide                   " 타이핑시 마우스 커서 감추기
set scrolloff=2                 " 최소한 2줄이하로는 자동 스크롤
set guioptions-=T               " gvim 툴바 제거 
set backspace=eol,start,indent  " 줄 끝, 시작, 들여쓰기의 백스페이스시 이전줄로
set nowrap                      " display long lines as just on line
set cmdheight=2                 " Give more space for displaying messages
set updatetime=300              " Set updatetime
set shortmess+=c                " Don't pass message to ins-completion-menu

syntax sync minlines=200        " speed-up vim
set colorcolumn=80              " ruler

"================================= Turn of swap =====================================
set noswapfile
set nobackup
set nowb

"================================= Turn of undo ==============================
set undodir=~/undo               " Undo Folder
set undofile

"================================= Indentation ======================================
set si           " 좀더 똑똑한 들여 쓰기
set ts=4         " TAB 간격을 4칸으로 설정
set sw=4         " 자동 들여쓰기를 4칸으로 설정
set et           " TAB을 Space로 대체
set ai           " 자동 들여쓰기
set ci           " C 형태의 들여쓰기

"================================ 폰트 지정 =========================================
set encoding=cp949                    " Menu encoding
set fileencodings=utf-8,cp949
set fencs=ucs-bom,utf-8,euc-kr.latin1 " 한글 파일은 euc-kr로, 유니코드는 유니코드로
set tenc=cp949                        " 터미널 인코딩
set guifont=D2Coding\ Ligature:h14:cHANGEUL

"============================== GUI 초기 윈도우 크기 지정 ===========================
au GUIEnter * winsize 128 40

"============================== Python =======================================
set pythonthreedll=C:\Anaconda3\python38.dll
set pythonthreehome=C:\Anaconda3

"============================= Plugin ===============================================
call plug#begin('~/.vim/plugged')

Plug 'w0rp/ale'                         " Lint engine
Plug 'nightsense/simplifysimplify'      " Theme
Plug 'jiangmiao/auto-pairs'             " Auto pair for ',), }, ]...
Plug 'mhinz/vim-startify'               " Fancy start page for empty vim
Plug 'ctrlpvim/ctrlp.vim'               " Ctrl + P for search file
Plug 'tmhedberg/matchit'                " Extended % matching
Plug 'SirVer/ultisnips'                 " Snippets engine
Plug 'honza/vim-snippets'               " Snippets
Plug 'vim-airline/vim-airline'          " Statusbar
Plug 'vim-airline/vim-airline-themes'   " Statusbar theme
Plug 'tomtom/tcomment_vim'              " Comment toggle
Plug 'Yggdroot/indentLine'              " Indent guide
Plug 'tpope/vim-fugitive'               " For git
Plug 'mbbill/undotree'                  " Visualize undo history
Plug 'alfredodeza/pytest.vim'           " Pytest
Plug 'jremmen/vim-ripgrep'              " Recursive search for regex
Plug 'junegunn/vim-easy-align'          " vim alignment
Plug 'fisadev/vim-isort'                " Sort import statements of python
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' }  " Autodocstring
Plug 'machakann/vim-highlightedyank'    " highlight after yank

call plug#end()

"================================= Plugins setting ==================================
" ----- netrw -----
let g:netrw_banner=0                                   " disable annoying banner
let g:netrw_winsize = 18                               " width in percent
"let g:netrw_browse_split=4                             " open in prior window
let g:netrw_altv=1                                     " open splits to the right
let g:netrw_hide=1                                     " show not-hidden files
let g:netrw_list_hide='\.o,\.obj,*\~,\.pyc,\.class'    "stuff to ignore when tab completing
let g:netrw_list_hide.='\.env,'
let g:netrw_list_hide.='\.env[0-9].,'
let g:netrw_list_hide.='\.env-pypy,'
let g:netrw_list_hide.='\.git,'
let g:netrw_list_hide.='\.gitkeep,'
let g:netrw_list_hide.='\.vagrant,'
let g:netrw_list_hide.='\.tmp,'
let g:netrw_list_hide.='\.coverage$,'
let g:netrw_list_hide.='\.DS_Store,'
let g:netrw_list_hide.='__pycache__,'
let g:netrw_list_hide.='\.webassets-cache/,'
let g:netrw_list_hide.='\.sass-cache/,'
let g:netrw_list_hide.='\.ropeproject/,'
let g:netrw_list_hide.='vendor/rails/,'
let g:netrw_list_hide.='vendor/cache/,'
let g:netrw_list_hide.='\.gem,'
let g:netrw_list_hide.='\.ropeproject/,'
let g:netrw_list_hide.='\.coverage/,'
let g:netrw_list_hide.='log/,'
let g:netrw_list_hide.='tmp/,'
let g:netrw_list_hide.='\.tox/,'
let g:netrw_list_hide.='\.idea/,'
let g:netrw_list_hide.='\.egg,\.egg-info,'
let g:netrw_list_hide.='\.png,\.jpg,\.gif,\.ico,'
let g:netrw_list_hide.='\.docx,\.pptx,\.xlsx,'
let g:netrw_list_hide.='\.so,\.swp,\.zip,/\.Trash/,\.pdf,\.dmg,/Library/,/\.rbenv/,'
let g:netrw_list_hide.='*/\.nx/**,*\.app'
let g:netrw_list_hide.='__pycache__/'

function! NetrwMapping()
  nnoremap <buffer> <silent> <c-l> :wincmd l<cr>                " Unmap keybinding
endfunction

" Toggle Vexplore with Leader-E
let g:NetrwIsOpen=0

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i 
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction
nnoremap <silent> <leader>e :call ToggleNetrw()<CR>

augroup NetRw
  autocmd!
  autocmd filetype netrw call NetrwMapping()
  autocmd VimEnter * if argc() == 0 | cd ~ | Startify | call ToggleNetrw() | wincmd w | endif
augroup END

" ----- ale -----
let g:ale_lint_on_save = 1                            "Lint when saving a file
let g:ale_sign_error = 'x'                            "Lint error sign
let g:ale_sign_warning = 'w'                          "Lint warning sign
let g:ale_statusline_format =[' %d E ', ' %d W ', ''] "Status line texts
let g:ale_linters = {
\   'python': ['flake8'],
\}
let g:ale_pattern_options = {
\   '.*\.js$': {'ale_enabled': 0},
\   '.*\.html$': {'ale_enabled': 0},
\}

" ----- Ctrlp ----
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']       "Ignore in .gitignore
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'                                           "Ignore node_modules
let g:ctrlp_custom_ignore = {
  \ 'file': '\v\.(pyc|so|dll)$',
  \ }

nnoremap <silent> <leader>p :CtrlPBuffer<cr>

" ---- UltiSnips ----
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

" ----- airline -----
let g:airline#extensions#tabline#enabled = 1  " turn on buffer list
let g:airline_theme='minimalist'
set laststatus=2                              " turn on bottom bar

" ----- NeoSolarized -----
colorscheme simplifysimplify-dark

" ----- Indent guide -----
let g:indentLine_enabled = 1
set list listchars=trail:.

" ----- Fugitive ----- 
nmap <silent> <leader>gs :G<CR>

" ----- Undotreee -----
nmap <silent> <leader>u :UndotreeShow<CR>

" ----- RipGrep -----
if executable('rg')
    let g:rg_derive_root='true'
endif
nnoremap <C-f> :Rg -i 

" ----- Vim-easy-align -----
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ----- isort -----
let g:vim_isort_config_overrides = {
  \ 'line_length': 79, 'include_trailing_comma': 1,
  \ 'use_parentheses': 1, 'atomic': 0, 'multi_line_output': 4,
  \ 'import_heading_stdlib': 'Standard library imports',
  \ 'import_heading_firstparty' : 'Local imports',
  \ 'import_heading_thirdparty': 'Third party imports'}

" ----- vim-pydocstring -----
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
nmap <silent> <leader>d <Plug>(pydocstring)
let g:pydocstring_doq_path = 'C:\Anaconda3\Scripts\doq.exe'
let g:pydocstring_formatter = 'numpy'

" ----- vim-highlightedyank -----
let g:highlightedyank_highlight_duration = 400

"============================ Key binding ===========================================

" ESC키를 누르면 한글모드가 해제
" 입력모드에서 이전 언어 설정 모드를 유지
inoremap <ESC> <ESC>:set imdisable<CR>
nnoremap i :set noimd<CR>i
nnoremap I :set noimd<CR>I
nnoremap a :set noimd<CR>a
nnoremap A :set noimd<CR>A
nnoremap o :set noimd<CR>o
nnoremap O :set noimd<CR>O

" ----- pip install . -----
nnoremap <silent> <Leader>in :w<CR>:!pip install .<CR>

" ----- Change working directory -----
nnoremap <silent> <Leader>cd :cd %:h<CR>

" ----- 창이동 단축키 -----
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" ----- 창 크기 조절 -----
noremap <silent> <Leader>[ :set columns+=30<CR><C-w>=
noremap <silent> <Leader>] :set columns-=30<CR><C-w>=
noremap <silent> <Leader>= :set lines+=4<CR><C-w>=
noremap <silent> <Leader>- :set lines-=4<CR><C-w>=

" ------ Run python ------
autocmd FileType python map <buffer> <F5> :w<CR>:exec '!python' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F5> <esc>:w<CR>:exec '!python' shellescape(@%, 1)<CR>

" ------ Edit vimrc  -----
nnoremap <silent> <Leader>, :e $MYVIMRC<CR>

" ------ tabout ------
inoremap <s-tab> <esc>la

