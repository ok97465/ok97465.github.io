{
  "subplots of matplotlib": {
    "prefix": "fig,",
    "body": [
      "fig, ax = subplots(nrows=1, ncols=1)",
      "ax.plot($1)",
      "ax.set_xlabel('$2')",
      "ax.set_ylabel('$3')",
      "ax.set_title('$4')",
      "ax.grid(True)",
      "$0"
    ],
    "description": "subplots for plot of matplotlib"
  },
  "subplots of matplotlib 3d": {
    "prefix": "fig_3d,",
    "body": [
      "fig = figure()",
      "ax = fig.add_subplot(111, projection='3d')",
      "ax.plot($1)",
      "ax.set_xlabel('$2')",
      "ax.set_ylabel('$3')",
      "ax.set_zlabel('$4')",
      "ax.set_title('$5')",
      "ax.grid(True)",
      "ax.xaxis.labelpad = 40",
      "ax.yaxis.labelpad = 40",
      "ax.zaxis.labelpad = 40",
      "ax.dist = 11",
      "ax.view_init(elev=27, azim=-37)",
      "# ax.set_aspect('equal', 'box')",
      "fig.tight_layout()",
      "$0"
    ],
    "description": "Axes3D is required."
  },
  "change theme of matplotlib": {
    "prefix": "theme_plot",
    "body": [
      "# %% Theme of matplotlib",
      "if 1:  # Dark Style",
      "    jtstyle = 'monokai'",
      "    colormap = 'mako'",
      "else:",
      "    xkcd()",
      "    jtstyle = 'grade3'",
      "    colormap = 'jet'",
      "jtplot.style(jtstyle, context='poster', fscale=2.6)",
      "${1:figsize_2col = get_figsize(1, 2)}",
      "$0"
    ],
    "description": "Set the theme of matplotlib"
  },
  "save variables by dill": {
    "prefix": "save",
    "body": [
      "save_vars('$1', globals())$0"
    ],
    "description": "save by dill"
  },
  "load variables by dill": {
    "prefix": "load",
    "body": [
      "load_vars('$1', globals())$0"
    ],
    "description": "load by dill"
  },
  "Set Backend of matplotlib": {
    "prefix": "backend_mpl",
    "body": [
      "# %% Backend of matplotlib",
      "ipython = get_ipython()",
      "ipython.magic('%matplotlib inline')",
      "$0"
    ],
    "description": "Set Backend of matplotlib"
  },
  "sympy command": {
    "prefix": "sympy_command",
    "body": [
      "import sympy",
      "from IPython.display import display",
      "from sympy import (",
      "    symbols, init_printing, pi, exp, sqrt, cos, sin, tan, atan,",
      "    diff, integrate, solve, Abs, Eq, simplify)",
      "from sympy.integrals.transforms import fourier_transform",
      "init_printing(forecolor='White')",
      "$0",
      "x, y, th1 = symbols('x y theta_1')",
      "",
      "# simultaneous Equation",
      "eq1 = Eq(lhs=x + sqrt(y) + th1**2, rhs=1)",
      "eq2 = Eq(lhs=x + y, rhs=0.5)",
      "eq3 = Eq(lhs=th1, rhs=0.8)",
      "display(eq1)",
      "display(eq2)",
      "display(eq3)",
      "answer = solve([eq1, eq2, eq3], x, y, th1)",
      "display(answer)",
      "",
      "# derviation",
      "fx = x**2",
      "dfx = diff(fx, x)",
      "display(dfx)",
      "",
      "# integral",
      "Fx = integrate(fx, x)",
      "display(Fx)",
      "",
      "# substitute",
      "expr = x**3 + 4*x*y - th1",
      "display(expr.subs([(x, 3), (y, 7), (th1, 30)]))",
      "",
      "#fourier transform",
      "Fourier_y = fourier_transform(exp(1j * pi * x**2), x, y)",
      "display(Fourier_y)",
      ""
    ],
    "description": "Insert Sympy Example"
  }
}