[{"language": "python", "triggers": [{"trigger": "class", "descriptions": [{"description": "plain", "snippet": {"text": "class ${1:ClassName}:\n    def __init__(self, ${2:*args}, ${3:**kwargs}):\n        ${4:pass}$0", "remove_trigger": false}}, {"description": "inheritance", "snippet": {"text": "class ${1:ClassName}($2):\n    def __init__(self, ${3:*args}, ${4:**kwargs}):\n        super().__init__(${5:*args}, ${6:**kwargs})$0", "remove_trigger": false}}]}, {"trigger": "def", "descriptions": [{"description": "method", "snippet": {"text": "def ${1:method_name}(self, ${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0", "remove_trigger": false}}, {"description": "function", "snippet": {"text": "def ${1:func_name}(${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0", "remove_trigger": false}}]}, {"trigger": "for", "descriptions": [{"description": "range", "snippet": {"text": "for ${1:i} in range(${2:0}, ${3:n}):\n    ${4:pass}$0", "remove_trigger": false}}, {"description": "iterator", "snippet": {"text": "for ${1:x} in ${2:iterator}:\n    ${3:pass}$0", "remove_trigger": false}}]}, {"trigger": "while", "descriptions": [{"description": "condition", "snippet": {"text": "while ${1:cond}:\n    ${2:pass}$0", "remove_trigger": false}}, {"description": "infinite", "snippet": {"text": "while True:\n    ${1:pass}$0", "remove_trigger": false}}]}, {"trigger": "import", "descriptions": [{"description": "package", "snippet": {"text": "import ${1:package}$0", "remove_trigger": false}}, {"description": "alias", "snippet": {"text": "import ${1:package} as ${2:alias}$0", "remove_trigger": false}}]}, {"trigger": "from", "descriptions": [{"description": "import", "snippet": {"text": "from ${1:package} import ${2:module}$0", "remove_trigger": false}}, {"description": "alias", "snippet": {"text": "from ${1:package} import ${2:module} as ${3:alias}$0", "remove_trigger": false}}]}, {"trigger": "async", "descriptions": [{"description": "def", "snippet": {"text": "async def ${1:func_name}(${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0", "remove_trigger": false}}, {"description": "method", "snippet": {"text": "async def ${1:method_name}(self, ${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0", "remove_trigger": false}}, {"description": "for", "snippet": {"text": "async for ${1:x} in ${2:iterator}:\n    ${3:pass}$0", "remove_trigger": false}}]}, {"trigger": "try", "descriptions": [{"description": "except", "snippet": {"text": "\ntry:\n    ${1:pass}\nexcept ${2:Exception}:\n    ${3:pass}$0\n", "remove_trigger": false}}, {"description": "except alias", "snippet": {"text": "try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}$0", "remove_trigger": false}}, {"description": "except/finally", "snippet": {"text": "try:\n    ${1:pass}\nexcept ${2:Exception}:\n    ${3:pass}\nfinally:\n    ${4:pass}$0", "remove_trigger": false}}, {"description": "except alias/finally", "snippet": {"text": "try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}\nfinally:\n    ${5:pass}$0", "remove_trigger": false}}]}, {"trigger": "with", "descriptions": [{"description": "context", "snippet": {"text": "with ${1:context} as ${2:alias}:\n    ${3:pass}$0", "remove_trigger": false}}]}, {"trigger": "list", "descriptions": [{"description": "comprehension", "snippet": {"text": "[${1:x} for ${2:x} in ${3:iterator}]$0", "remove_trigger": true}}, {"description": "comprehension if", "snippet": {"text": "[${1:x} for ${2:x} in ${3:iterator} if ${4:cond}]$0", "remove_trigger": true}}, {"description": "comprehension if/else", "snippet": {"text": "[${1:x} if ${2:cond} else ${3:other} for ${4:x} in ${5:iterator}]$0", "remove_trigger": true}}]}, {"trigger": "dict", "descriptions": [{"description": "comprehension", "snippet": {"text": "{${1:key}:${2:value} for ${3:elem} in ${4:iterator}\\}$0", "remove_trigger": true}}, {"description": "comprehension if", "snippet": {"text": "{${1:key}:${2:value} for ${3:elem} in ${4:iterator} if ${5:cond}\\}$0", "remove_trigger": true}}]}, {"trigger": "set", "descriptions": [{"description": "comprehension", "snippet": {"text": "{${1:elem} for ${2:elem} in ${3:iterator}\\}$0", "remove_trigger": true}}, {"description": "comprehension if", "snippet": {"text": "{${1:elem} for ${2:elem} in ${3:iterator} if ${4:cond}\\}$0", "remove_trigger": true}}, {"description": "comprehension if/else", "snippet": {"text": "{${1:elem} if ${2:cond} else ${3:other} for ${4:elem} in ${5:iterator}\\}$0", "remove_trigger": true}}]}, {"trigger": "fig,", "descriptions": [{"description": "figure", "snippet": {"text": "fig = figure()\nax1 = fig.add_subplot(1, 1, 1)\nax1.plot($1)\nax1.set_xlabel('$2')\nax1.set_ylabel('$3')\nax1.set_title('$4')\nax1.grid(True)\nfig.tight_layout()\n$0\n", "remove_trigger": true}}]}, {"trigger": "__main__", "descriptions": [{"description": "if clause", "snippet": {"text": "if __name__ == '__main__':\n    ${1:pass}$0", "remove_trigger": true}}]}, {"trigger": "fig_3d", "descriptions": [{"description": "fig 3d", "snippet": {"text": "fig = figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot($1)\nax.set_xlabel('$2')\nax.set_ylabel('$3')\nax.set_zlabel('$4')\nax.set_title('$5')\nax.grid(True)\nax.xaxis.labelpad = 40\nax.yaxis.labelpad = 40\nax.zaxis.labelpad = 40\nax.dist = 11\nax.view_init(elev=27, azim=-37)\n# ax.set_aspect('equal', 'box')\nfig.tight_layout()\n$0", "remove_trigger": true}}]}, {"trigger": "fig_imagesc", "descriptions": [{"description": "imagesc", "snippet": {"text": "fig = figure()\nax1 = fig.add_subplot(1, 1, 1)\nax1.imshow($1, origin='upper', aspect='auto', cmap=${2:'viridis'})\nax1.set_xlabel('$3')\nax1.set_ylabel('$4')\nax1.set_title('$5')\nax1.grid(False)\nfig.tight_layout()\n$0", "remove_trigger": true}}]}, {"trigger": "theme_plot", "descriptions": [{"description": "jupyterthemes", "snippet": {"text": "# %% Theme of matplotlib\nif 1:  # Dark Style\n    jtstyle = 'monokai'\n    colormap = 'mako'\nelse:\n    jtstyle = 'grade3'\n    colormap = 'turbo'\njtplot.style(jtstyle)\n${1:figsize_2col = get_figsize(1, 2)}\n$0", "remove_trigger": true}}]}, {"trigger": "surf_mayavi", "descriptions": [{"description": "surf mayavi", "snippet": {"text": "axe_color = (0.3, 0.3, 0.3)\nf_color = (0, 0, 0)\nf_size = 25\nfig = mlab.figure(bgcolor=(1, 1, 1), size=(600, 500))\nmlab.surf($1, colormap='viridis', warp_scale='auto')\nmlab.outline(figure=fig, color=axe_color)\nmlab.title('$2', figure=fig, size=0.2, color=f_color)\ncb = mlab.colorbar(title='${3:[dB]}',\n                   orientation='vertical',\n                   nb_labels=2,\n                   label_fmt='%0.f')\ncb.scalar_bar.unconstrained_font_size = True\ncb.label_text_property.font_size = f_size\n\naxes = mlab.axes(figure=fig, color=axe_color,\n                 nb_labels=1,\n                 x_axis_visibility=False,\n                 xlabel='$4',\n                 y_axis_visibility=True,\n                 ylabel='$5',\n                 z_axis_visibility=False,\n                 zlabel='$6')\naxes.title_text_property.color = f_color\naxes.title_text_property.font_size = f_size\naxes.label_text_property.color = f_color\naxes.label_text_property.font_size = f_size\nmlab.gcf().scene.parallel_projection = True\n$0", "remove_trigger": true}}]}, {"trigger": "save", "descriptions": [{"description": "save by dill", "snippet": {"text": "save_vars('$1', globals())$0", "remove_trigger": false}}]}, {"trigger": "load", "descriptions": [{"description": "load by dill", "snippet": {"text": "load_vars('$1', globals())$0", "remove_trigger": false}}]}, {"trigger": "dataclass_slots", "descriptions": [{"description": "dataclass with slots", "snippet": {"text": "@dataclass_repr\n@dataslots\n@dataclass(repr=False)\nclass $1:\n    \"\"\"$2.\"\"\"\n\n    $0\n", "remove_trigger": true}}]}, {"trigger": "sympy_command", "descriptions": [{"description": "sympy_command", "snippet": {"text": "import sympy\nfrom IPython.display import display\nfrom sympy import (\n    symbols, init_printing, pi, exp, sqrt, cos, sin, tan, atan,\n    diff, integrate, solve, Abs, Eq, simplify)\nfrom sympy.integrals.transforms import fourier_transform\ninit_printing(forecolor='White')\n$0\nx, y, th1 = symbols('x y theta_1')\n\n# Simultaneous Equation\neq1 = Eq(lhs=x + sqrt(y) + th1**2, rhs=1)\neq2 = Eq(lhs=x + y, rhs=0.5)\neq3 = Eq(lhs=th1, rhs=0.8)\ndisplay(eq1)\ndisplay(eq2)\ndisplay(eq3)\nanswer = solve([eq1, eq2, eq3], x, y, th1)\ndisplay(answer)\n\n# derviation\",\nfx = x**2\ndfx = diff(fx, x)\ndisplay(dfx)\n\n# Integral\nFx = integrate(fx, x)\ndisplay(Fx)\n\n# Substitute\nexpr = x**3 + 4*x*y - th1\ndisplay(expr.subs([(x, 3), (y, 7), (th1, 30)]))\n\n# Fourier transform\nFourier_y = fourier_transform(exp(1j * pi * x**2), x, y)\ndisplay(Fourier_y)\n\n", "remove_trigger": true}}]}]}]